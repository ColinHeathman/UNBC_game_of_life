package gol;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.Queue;

/**
 *
 * @author Colin
 */
public class Display extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Display() {
        rows = Client.rows;
        cols = Client.cols;
        initComponents();
        this.setTitle("G.O.L Simulation");
        board = new boolean[rows][cols];
        this.createBufferStrategy(2);
        this.strategy = this.getBufferStrategy();
        this.image = new BufferedImage(cols,rows,BufferedImage.TYPE_INT_RGB);
        this.LIVE = new Color(0,255,0).getRGB();
        this.DEAD = new Color(0,0,0).getRGB();
        this.font = new Font("Terminal",Font.BOLD,10);
        zoom = 2;
        this.setVisible(true);
        offset = new Point2D.Float(0.0f,0.0f);
        userChanges = new java.util.concurrent.LinkedBlockingQueue<Point>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(20, 20, 20));
        setLocationByPlatform(true);
        setName("MainFrame"); // NOI18N
        setPreferredSize(new Dimension(cols,rows));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(button == 1) {
            if(lastpoint == null) {
                
            } else {
                currentpoint = new Point2D.Float(evt.getPoint().x,evt.getPoint().y);
                offset.setLocation(
                        offset.x + (currentpoint.x - lastpoint.x)
                        ,offset.y + (currentpoint.y - lastpoint.y));
                lastpoint = currentpoint;
                currentpoint = null;
            }
        } else if (button == 3) {
            //Get mouse point on screen
            Point2D.Float mouse = new Point2D.Float(evt.getPoint().x,evt.getPoint().y);

            //Global to local translation
            mouse.setLocation(
                    (mouse.x - offset.x) / zoom
                    ,(mouse.y - offset.y) / zoom);
            
            int x = (int) mouse.x;
            int y = (int) mouse.y;
            try {if (x >= Client.sci && x <= Client.eci && y > Client.sri && y < Client.eri) userChanges.put(new Point(x,y));}
            catch (InterruptedException e) {/*Do nothing*/}
        }
        evt.consume();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        lastpoint = null;
        button = 0;
    }//GEN-LAST:event_formMouseReleased

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        //Get mouse point on screen
        Point2D.Float mouse = new Point2D.Float(evt.getPoint().x,evt.getPoint().y);
        
        //Global to local translation
        mouse.setLocation(
                (mouse.x - offset.x) / zoom
                ,(mouse.y - offset.y) / zoom);
        
        
        //mouse is the origin from which to zoom
        int rot = evt.getWheelRotation();
        if(rot < 0 && zoom < 10) {
            offset.setLocation(
                 offset.x - mouse.x
                ,offset.y - mouse.y);
            zoom++;
        } else if (rot > 0 && zoom > 1) {
            offset.setLocation(
                 offset.x + mouse.x
                ,offset.y + mouse.y);
            zoom--;
        }
        
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        lastpoint = new Point2D.Float(evt.getPoint().x,evt.getPoint().y);
        switch(evt.getButton()){
            case(MouseEvent.BUTTON1): button = 1; break;
            case(MouseEvent.BUTTON2): button = 2; break;
            case(MouseEvent.BUTTON3): button = 3; break;
            default: button = 0; break;
        }
    }//GEN-LAST:event_formMousePressed

    /**
     * @param args the command line arguments
     */
    public void update() {
        grabBoard(); //Copy board snapshot
        checkFPS();
        refresh(); //Refresh the image
    }
    
    private void grabBoard() {
        for (int y = 0; y < rows; y++) {
            for (int x = 0; x < cols; x++) {
                board[y][x] = Client.currentStates[y][x];
            }
        }
    }
    
    private void drawImage() {
        for (int y = 0; y < rows; y++) {
            for (int x = 0; x < cols; x++) {
                if (board[y][x]) {
                    image.setRGB(x, y, LIVE);
                } else {
                    image.setRGB(x, y, DEAD);
                }
            }
        }
        
    }
    
    private void refresh() {
        Graphics2D g2 = null;
        do {
            try{
                g2 = (Graphics2D) strategy.getDrawGraphics();
                super.paint(g2);
                drawImage();
                AffineTransform transform = new AffineTransform();
                transform.translate(offset.x, offset.y);
                transform.scale(zoom, zoom);
                g2.drawImage(image,transform,this);
                g2.setColor(Color.RED);
                Rectangle2D.Float r = new Rectangle2D.Float(Client.sci,Client.sri,Client.eci-Client.sci+1,Client.eri-Client.sri+1);
                g2.draw(transform.createTransformedShape(r));
                g2.setColor(Color.DARK_GRAY);
                int bottom = this.getBounds().height;
                g2.fillRect(0, bottom - 20, 75, 15);
                g2.setColor(Color.white);
                g2.setFont(font);
                g2.drawString("FPS: " + String.format("%.3g%n", FPS), 10, bottom - 10);
            } finally {
                g2.dispose();
            }
            strategy.show();
        } while (strategy.contentsLost());
    }
    
    private void checkFPS() {
        long thisCheck = System.nanoTime();
        long difference = thisCheck - lastCheck;
        //One frame has occurred, given the time it took to render one frame. The number of frames rendered in one second is:
        FPS =  (float) 1000000000 / difference; 
        lastCheck = thisCheck;
    }
    
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private int rows;
    private int cols;
    private boolean[][] board;
    private BufferStrategy strategy;
    private BufferedImage image;
    private final int LIVE;
    private final int DEAD;
    private long lastCheck;
    private float FPS;
    private Font font;
    private Point2D.Float offset;
    private Point2D.Float currentpoint;
    private Point2D.Float lastpoint;
    private int zoom;
    protected java.util.concurrent.BlockingQueue userChanges;
    private int button;
}
